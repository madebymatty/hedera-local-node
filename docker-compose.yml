services:
  haveged:
    image: "${HAVEGED_IMAGE_PREFIX}network-node-haveged:${HAVEGED_IMAGE_TAG}"
    container_name: haveged
    restart: always
    mem_swappiness: 0
    privileged: true
    network_mode: none
    command: ["-d 16"]

  network-node:
    image: "${NETWORK_NODE_IMAGE_PREFIX}${NETWORK_NODE_IMAGE_NAME}:${NETWORK_NODE_IMAGE_TAG}"
    container_name: network-node
    user: root
    restart: unless-stopped
    mem_swappiness: 0
    mem_limit: "${NETWORK_NODE_MEM_LIMIT}"
    memswap_limit: "${NETWORK_NODE_MEM_LIMIT}"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      JAVA_HEAP_MIN: "${PLATFORM_JAVA_HEAP_MIN}"
      JAVA_HEAP_MAX: "${PLATFORM_JAVA_HEAP_MAX}"
      JAVA_OPTS: "${PLATFORM_JAVA_OPTS} -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/hgcapp/logs/heapdump.hprof -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitiatingHeapOccupancyPercent=70"
    healthcheck:
      test:
        [
          "CMD",
          "grep",
          "-Ei",
          "Now current platform status = ACTIVE|Hedera - HederaNode#0 is ACTIVE",
          "/opt/hgcapp/services-hedera/HapiApp2.0/output/hgcaa.log"
        ]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 300s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    depends_on:
      haveged:
        condition: service_started
      record-streams-uploader:
        condition: service_started
    networks:
      network-node-bridge:
        ipv4_address: 172.27.0.3
    ports:
      - "50211:50211"
      - "50212:50212"
      - "9999:9999"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/accountBalances:/opt/hgcapp/accountBalances"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams:/opt/hgcapp/recordStreams"
      - "${APPLICATION_CONFIG_PATH}:/opt/hgcapp/services-hedera/HapiApp2.0/data/config"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/logs:/opt/hgcapp/services-hedera/HapiApp2.0/output"
      - "${APPLICATION_ROOT_PATH}/data/keys:/opt/hgcapp/services-hedera/HapiApp2.0/data/keys"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/stats:/opt/hgcapp/services-hedera/HapiApp2.0/data/stats"
      - "${APPLICATION_ROOT_PATH}/config.txt:/opt/hgcapp/services-hedera/HapiApp2.0/config.txt"
      - "${APPLICATION_ROOT_PATH}/settings.txt:/opt/hgcapp/services-hedera/HapiApp2.0/settings.txt"
      - "${APPLICATION_ROOT_PATH}/log4j2.xml:/opt/hgcapp/services-hedera/HapiApp2.0/log4j2.xml"
      - "${APPLICATION_ROOT_PATH}/hedera.crt:/opt/hgcapp/services-hedera/HapiApp2.0/hedera.crt"
      - "${APPLICATION_ROOT_PATH}/hedera.key:/opt/hgcapp/services-hedera/HapiApp2.0/hedera.key"

  record-streams-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: record-streams-uploader
    user: root
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_started
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "1"
      REAPER_INTERVAL: "5"
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "true"
      SIG_PRIORITIZE: "true"
      SIG_EXTENSION: "rcd_sig"
      STREAM_EXTENSION: "${STREAM_EXTENSION}"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "recordstreams/record0.0.3"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams/record0.0.3:/records"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /records
      - --s3-endpoint
      - http://minio:9000
      - --debug

  account-balances-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: account-balances-uploader
    user: root
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_started
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "1"
      REAPER_INTERVAL: "5"
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "true"
      SIG_PRIORITIZE: "true"
      SIG_EXTENSION: "pb_sig"
      STREAM_EXTENSION: "pb"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "accountBalances/balance0.0.3"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/accountBalances/balance0.0.3:/balances"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /balances
      - --s3-endpoint
      - http://minio:9000
      - --debug

  record-sidecar-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: record-sidecar-uploader
    user: root
    restart: always
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      # Reaper settings for better data retention
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "24"  # Keep at least 24 hours of records
      REAPER_INTERVAL: "60"  # Check every hour
      # Upload settings
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "false"
      SIG_PRIORITIZE: "false"
      STREAM_EXTENSION: "rcd.gz"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "recordstreams/record0.0.3/sidecar"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      # Retry settings
      MAX_RETRIES: "5"
      RETRY_DELAY: "30"
      UPLOAD_TIMEOUT: "300"
      # Buffer settings
      BUFFER_SIZE: "104857600"  # 100MB buffer
      MAX_CONCURRENT_UPLOADS: "3"
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "mirror.py", "|", "grep", "-v", "grep"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams/record0.0.3/sidecar:/sidecar-files:rw"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams/record0.0.3/backup:/backup-files:rw"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /sidecar-files
      - --backup-directory
      - /backup-files
      - --s3-endpoint
      - http://minio:9000
      - --retry-failed
      - --verify-upload
      - --debug

  minio:
    image: ghcr.io/mhga24/minio/minio
    container_name: minio
    entrypoint: sh
    command: -c 'mkdir -p /data/hedera-streams && minio server /data --console-address ":9001" --address ":9000"'
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_COMPRESSION_ENABLE: "on"
      MINIO_COMPRESSION_EXTENSIONS: ".txt,.log,.csv,.json,.tar,.xml,.bin"
      MINIO_COMPRESSION_MIME_TYPES: "text/*,application/json,application/xml,application/octet-stream"
      MINIO_CACHE_DRIVES: "/data/cache"
      MINIO_CACHE_EXCLUDE: "*.pdf,*.mp4"
      MINIO_CACHE_QUOTA: "80"
      MINIO_CACHE_AFTER: "0"
      MINIO_CACHE_WATERMARK_LOW: "70"
      MINIO_CACHE_WATERMARK_HIGH: "90"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cloud-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio-data:/data"
      - "minio-cache:/data/cache"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  db:
    image: "${MIRROR_POSTGRES_IMAGE}"
    container_name: mirror-node-db
    environment:
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      GRPC_PASSWORD: mirror_grpc_pass
      IMPORTER_PASSWORD: mirror_importer_pass
      OWNER_PASSWORD: mirror_node_pass
      POSTGRES_PASSWORD: postgres_password
      REST_PASSWORD: mirror_api_pass
      ROSETTA_PASSWORD: mirror_rosetta_pass
      # Performance Tuning
      POSTGRES_SHARED_BUFFERS: 2GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 6GB
      POSTGRES_MAINTENANCE_WORK_MEM: 512MB
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAX_WORKER_PROCESSES: 8
      POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER: 4
      POSTGRES_MAX_PARALLEL_WORKERS: 8
      POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS: 4
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_SYNCHRONOUS_COMMIT: 'off'
      POSTGRES_MAX_WAL_SIZE: 4GB
      POSTGRES_MIN_WAL_SIZE: 2GB
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 500
    networks:
      - mirror-node
    ports:
      - "5433:5432"
    restart: unless-stopped
    stop_grace_period: 2m
    stop_signal: SIGTERM
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    mem_swappiness: 0
    mem_limit: "8G"
    volumes:
      - ./compose-network/mirror-node/init.sh:/docker-entrypoint-initdb.d/init.sh
      - type: volume
        source: mirror-node-postgres
        target: /var/lib/postgresql/data
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 2g

  grpc:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-grpc:${MIRROR_GRPC_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-grpc
    restart: unless-stopped
    mem_swappiness: 0
    mem_limit: "${MIRROR_GRPC_MEM_LIMIT}"
    memswap_limit: "${MIRROR_GRPC_MEM_LIMIT}"
    depends_on:
      network-node:
        condition: service_started
      db:
        condition: service_started
    environment:
      HEDERA_MIRROR_GRPC_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-grpc/
    networks:
      - mirror-node
    ports:
      - "5600:5600"
    volumes:
      - "${MIRROR_NODE_CONFIG_PATH}/compose-network/mirror-node/application.yml:/usr/etc/hedera-mirror-grpc/application.yml"

  importer:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-importer:${MIRROR_IMPORTER_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-importer
    restart: unless-stopped
    mem_swappiness: 0
    mem_limit: "${MIRROR_IMPORTER_MEM_LIMIT}"
    memswap_limit: "${MIRROR_IMPORTER_MEM_LIMIT}"
    depends_on:
      minio:
        condition: service_started
      db:
        condition: service_started
    environment:
      HEDERA_MIRROR_IMPORTER_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-importer/
    networks:
      - cloud-storage
      - mirror-node
    volumes:
      - "${MIRROR_NODE_CONFIG_PATH}/compose-network/mirror-node/application.yml:/usr/etc/hedera-mirror-importer/application.yml"
      - ./compose-network/mirror-node/addressBook.bin:/usr/etc/hedera-mirror-importer/local-dev-1-node.addressbook.f102.json.bin

  rest:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-rest:${MIRROR_REST_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-rest
    mem_swappiness: 0
    mem_limit: "${MIRROR_REST_MEM_LIMIT}"
    memswap_limit: "${MIRROR_REST_MEM_LIMIT}"
    depends_on:
      importer:
        condition: service_started
      db:
        condition: service_started
    environment:
      HEDERA_MIRROR_REST_DB_HOST: db
    networks:
      - mirror-node
    ports:
      - "5551:5551"
    restart: unless-stopped
    tty: false

  rest-java:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-rest-java:${MIRROR_REST_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-rest-java
    mem_swappiness: 0
    mem_limit: "${MIRROR_REST_MEM_LIMIT}"
    memswap_limit: "${MIRROR_REST_MEM_LIMIT}"
    depends_on:
      importer:
        condition: service_started
      db:
        condition: service_started
    environment:
      HEDERA_MIRROR_RESTJAVA_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-rest-java/
    networks:
      - mirror-node
    ports:
      - 8084:8084
    restart: unless-stopped
    tty: true
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-rest-java/application.yml

  explorer:
    container_name: hedera-explorer
    image: "${MIRROR_NODE_EXPLORER_IMAGE_PREFIX}hedera-mirror-node-explorer:${MIRROR_NODE_EXPLORER_IMAGE_TAG}"
    restart: "unless-stopped"
    ports:
      - "8080:8080"
    environment:
      DOCKER_LOCAL_MIRROR_NODE_MENU_NAME: ${DOCKER_LOCAL_MIRROR_NODE_MENU_NAME}
      DOCKER_LOCAL_MIRROR_NODE_URL: ${DOCKER_LOCAL_MIRROR_NODE_URL}
    networks:
      - mirror-node

  web3:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-web3:${MIRROR_WEB3_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-web3
    mem_swappiness: 0
    mem_limit: "${MIRROR_WEB3_MEM_LIMIT}"
    memswap_limit: "${MIRROR_WEB3_MEM_LIMIT}"
    depends_on:
      importer:
        condition: service_started
      db:
        condition: service_started
    networks:
      - mirror-node
    environment:
      HEDERA_MIRROR_WEB3_DB_HOST: db
      HEDERA_MIRROR_WEB3_EVM_NETWORK: OTHER
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-web3/
    ports:
      - "8545:8545"
    restart: unless-stopped
    tty: true
    volumes:
      - "${MIRROR_NODE_CONFIG_PATH}/compose-network/mirror-node/application.yml:/usr/etc/hedera-mirror-web3/application.yml"

  monitor:
    image: "${MIRROR_IMAGE_PREFIX}hedera-mirror-monitor:${MIRROR_MONITOR_IMAGE_TAG:-${MIRROR_IMAGE_TAG}}"
    container_name: mirror-node-monitor
    mem_swappiness: 0
    mem_limit: "${MIRROR_MONITOR_MEM_LIMIT}"
    memswap_limit: "${MIRROR_MONITOR_MEM_LIMIT}"
    depends_on:
      grpc:
        condition: service_started
      rest:
        condition: service_started
      network-node:
        condition: service_healthy
    networks:
      - mirror-node
      - network-node-bridge
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: "file:/usr/etc/hedera-mirror-monitor/"
    ports:
      - "8082:8082"
    restart: unless-stopped
    tty: true
    volumes:
      - "${MIRROR_NODE_CONFIG_PATH}/compose-network/mirror-node/application.yml:/usr/etc/hedera-mirror-monitor/application.yml"

  relay:
    image: "${RELAY_IMAGE_PREFIX}hedera-json-rpc-relay:${RELAY_IMAGE_TAG}"
    container_name: json-rpc-relay
    mem_swappiness: 0
    mem_limit: "${RELAY_MEM_LIMIT}"
    memswap_limit: "${RELAY_MEM_LIMIT}"
    depends_on:
      rest:
        condition: service_started
      network-node:
        condition: service_healthy
    networks:
      - mirror-node
      - network-node-bridge
    environment:
      HEDERA_NETWORK: "${RELAY_HEDERA_NETWORK}"
      OPERATOR_ID_MAIN: "${RELAY_OPERATOR_ID_MAIN}"
      OPERATOR_KEY_MAIN: "${RELAY_OPERATOR_KEY_MAIN}"
      CHAIN_ID: "${RELAY_CHAIN_ID}"
      MIRROR_NODE_URL: "${RELAY_MIRROR_NODE_URL}"
      MIRROR_NODE_URL_WEB3: "${RELAY_MIRROR_NODE_URL_WEB3}"
      MIRROR_NODE_RETRIES: "${RELAY_MIRROR_NODE_RETRIES}"
      MIRROR_NODE_RETRY_DELAY: "${RELAY_MIRROR_NODE_RETRY_DELAY}"
      LOCAL_NODE: "${RELAY_LOCAL_NODE}"
      SERVER_PORT: "${RELAY_SERVER_PORT}"
      E2E_RELAY_HOST: "${RELAY_E2E_HOST}"
      FEE_HISTORY_MAX_RESULTS: "${RELAY_FEE_HISTORY_MAX_RESULTS}"
      DEFAULT_RATE_LIMIT: "${RELAY_DEFAULT_RATE_LIMIT}"
      TIER_1_RATE_LIMIT: "${RELAY_TIER_1_RATE_LIMIT}"
      TIER_2_RATE_LIMIT: "${RELAY_TIER_2_RATE_LIMIT}"
      TIER_3_RATE_LIMIT: "${RELAY_TIER_3_RATE_LIMIT}"
      ETH_CALL_DEFAULT_TO_CONSENSUS_NODE: "${RELAY_ETH_CALL_DEFAULT_TO_CONSENSUS_NODE}"
      LIMIT_DURATION: "${RELAY_LIMIT_DURATION}"
      HBAR_RATE_LIMIT_TINYBAR: "${RELAY_HBAR_RATE_LIMIT_TINYBAR}"
      HBAR_RATE_LIMIT_DURATION: "${RELAY_HBAR_RATE_LIMIT_DURATION}"
      ETH_GET_LOGS_BLOCK_RANGE_LIMIT: "${RELAY_ETH_GET_LOGS_BLOCK_RANGE_LIMIT}"
      DEV_MODE: "${RELAY_DEV_MODE}"
      INPUT_SIZE_LIMIT: "${RELAY_INPUT_SIZE_LIMIT}"
      RATE_LIMIT_DISABLED: "${RELAY_RATE_LIMIT_DISABLED}"
      ETH_POPULATE_SYNTHETIC_CONTRACT_RESULTS: "${RELAY_ETH_POPULATE_SYNTHETIC_CONTRACT_RESULTS}"
      REDIS_ENABLED: "${RELAY_REDIS_ENABLED}"
      REDIS_URL: "${RELAY_REDIS_URL}"
      MIRROR_NODE_GET_CONTRACT_RESULTS_RETRIES: "${RELAY_MIRROR_NODE_GET_CONTRACT_RESULTS_RETRIES}"
      DEBUG_API_ENABLED: "${RELAY_DEBUG_API_ENABLED}"
      HBAR_RATE_LIMIT_BASIC: "${RELAY_HBAR_RATE_LIMIT_BASIC}"
      HBAR_RATE_LIMIT_EXTENDED: "${RELAY_HBAR_RATE_LIMIT_EXTENDED}"
      HBAR_RATE_LIMIT_PRIVILEGED: "${RELAY_HBAR_RATE_LIMIT_PRIVILEGED}"
    ports:
      - "7546:7546"
    restart: unless-stopped
    tty: false

  relay-ws:
    image: "${RELAY_IMAGE_PREFIX}hedera-json-rpc-relay:${RELAY_IMAGE_TAG}"
    container_name: json-rpc-relay-ws
    mem_swappiness: 0
    mem_limit: "${RELAY_MEM_LIMIT}"
    memswap_limit: "${RELAY_MEM_LIMIT}"
    depends_on:
      rest:
        condition: service_started
      network-node:
        condition: service_healthy
    networks:
      - mirror-node
      - network-node-bridge
    environment:
      HEDERA_NETWORK: "${RELAY_HEDERA_NETWORK}"
      OPERATOR_ID_MAIN: "${RELAY_OPERATOR_ID_MAIN}"
      OPERATOR_KEY_MAIN: "${RELAY_OPERATOR_KEY_MAIN}"
      CHAIN_ID: "${RELAY_CHAIN_ID}"
      MIRROR_NODE_URL: "${RELAY_MIRROR_NODE_URL}"
      MIRROR_NODE_RETRIES: "${RELAY_MIRROR_NODE_RETRIES}"
      MIRROR_NODE_RETRY_DELAY: "${RELAY_MIRROR_NODE_RETRY_DELAY}"
      LOCAL_NODE: "${RELAY_LOCAL_NODE}"
      SERVER_PORT: "${RELAY_SERVER_PORT}"
      E2E_RELAY_HOST: "${RELAY_E2E_HOST}"
      FEE_HISTORY_MAX_RESULTS: "${RELAY_FEE_HISTORY_MAX_RESULTS}"
      DEFAULT_RATE_LIMIT: "${RELAY_DEFAULT_RATE_LIMIT}"
      TIER_1_RATE_LIMIT: "${RELAY_TIER_1_RATE_LIMIT}"
      TIER_2_RATE_LIMIT: "${RELAY_TIER_2_RATE_LIMIT}"
      TIER_3_RATE_LIMIT: "${RELAY_TIER_3_RATE_LIMIT}"
      ETH_CALL_DEFAULT_TO_CONSENSUS_NODE: "${RELAY_ETH_CALL_DEFAULT_TO_CONSENSUS_NODE}"
      LIMIT_DURATION: "${RELAY_LIMIT_DURATION}"
      HBAR_RATE_LIMIT_TINYBAR: "${RELAY_HBAR_RATE_LIMIT_TINYBAR}"
      HBAR_RATE_LIMIT_DURATION: "${RELAY_HBAR_RATE_LIMIT_DURATION}"
      ETH_GET_LOGS_BLOCK_RANGE_LIMIT: "${RELAY_ETH_GET_LOGS_BLOCK_RANGE_LIMIT}"
      DEV_MODE: "${RELAY_DEV_MODE}"
      INPUT_SIZE_LIMIT: "${RELAY_INPUT_SIZE_LIMIT}"
      RATE_LIMIT_DISABLED: "${RELAY_RATE_LIMIT_DISABLED}"
      SUBSCRIPTIONS_ENABLED: true
      HEALTHCHECK_PORT: 8547
      ETH_POPULATE_SYNTHETIC_CONTRACT_RESULTS: "${RELAY_ETH_POPULATE_SYNTHETIC_CONTRACT_RESULTS}"
      REDIS_ENABLED: "${RELAY_REDIS_ENABLED}"
      REDIS_URL: "${RELAY_REDIS_URL}"
      WS_CONNECTION_LIMIT_PER_IP: "${RELAY_WS_CONNECTION_LIMIT_PER_IP}"
      WS_CONNECTION_LIMIT: "${RELAY_WS_CONNECTION_LIMIT}"
      WS_MAX_INACTIVITY_TTL: "${RELAY_WS_MAX_INACTIVITY_TTL}"
      WS_MULTIPLE_ADDRESSES_ENABLED: "${RELAY_WS_MULTIPLE_ADDRESSES_ENABLED}"
      WS_SUBSCRIPTION_LIMIT: "${RELAY_WS_SUBSCRIPTION_LIMIT}"
    ports:
      - "8546:8546"
      - "8547:8547"
    restart: unless-stopped
    tty: false
    command: ["start:ws"]

  envoy:
    image: "${ENVOY_IMAGE_PREFIX}envoy:${ENVOY_IMAGE_TAG}"
    container_name: envoy-proxy
    ports:
      - "50213:50213"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
    networks:
      - network-node-bridge

  prometheus:
    image: "${PROMETHEUS_IMAGE_NAME}:${PROMETHEUS_IMAGE_TAG}"
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./compose-network/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      network-node-bridge:
        ipv4_address: 172.27.0.4

  grafana:
    image: "${GRAFANA_IMAGE_NAME}:${GRAFANA_IMAGE_TAG}"
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./compose-network/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./compose-network/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      network-node-bridge:
        ipv4_address: 172.27.0.5

  cache:
    image: ghcr.io/mhga24/redis:6-alpine
    container_name: relay-cache
    mem_limit: "${RELAY_MEM_LIMIT}"
    memswap_limit: "${RELAY_MEM_LIMIT}"
    ports:
      - 6379:6379
    restart: unless-stopped
    stop_signal: SIGTERM
    tty: true
    networks:
      network-node-bridge:
        ipv4_address: 172.27.0.50

networks:
  network-node-bridge:
    name: hedera-network-node
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
          ip_range: 172.27.0.0/24
          gateway: 172.27.0.254
  mirror-node:
    name: hedera-mirror-node
    driver: bridge
  cloud-storage:
    name: hedera-cloud-storage
    driver: bridge

volumes:
  mirror-node-postgres:
    name: mirror-node-postgres
  minio-data:
    name: minio-data
  minio-cache:
    name: minio-cache
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
